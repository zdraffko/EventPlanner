// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(EventPlannerDbContext))]
    [Migration("20200421122426_AddUserEvent")]
    partial class AddUserEvent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3241152-4516-4207-a941-9b25bec581e5"),
                            Category = "Tech",
                            City = "Sofia",
                            Date = new DateTime(2020, 3, 21, 15, 24, 25, 813, DateTimeKind.Local).AddTicks(9451),
                            Description = "This Event was 1 month ago",
                            Title = "Past Event 1",
                            Venue = "Sofia Tech Park"
                        },
                        new
                        {
                            Id = new Guid("8949eb2a-a13c-4ab7-98ec-52f411a5b36d"),
                            Category = "Tech",
                            City = "Plovdiv",
                            Date = new DateTime(2020, 2, 21, 15, 24, 25, 819, DateTimeKind.Local).AddTicks(7629),
                            Description = "This Event was 2 months ago",
                            Title = "Past Event 2",
                            Venue = "Mall Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("d0ce19cb-088b-4667-bf9b-93768eeb02f0"),
                            Category = "Sports",
                            City = "Sofia",
                            Date = new DateTime(2020, 5, 21, 15, 24, 25, 819, DateTimeKind.Local).AddTicks(7760),
                            Description = "This Event is 1 month in the future",
                            Title = "Future Event 1",
                            Venue = "Armeets Arena"
                        },
                        new
                        {
                            Id = new Guid("4dc44d97-7bf0-4dba-bc64-7ea788ce0e56"),
                            Category = "Music",
                            City = "Sofia",
                            Date = new DateTime(2020, 6, 21, 15, 24, 25, 819, DateTimeKind.Local).AddTicks(7773),
                            Description = "This Event is 2 months in the future",
                            Title = "Future Event 2",
                            Venue = "Armeets Arena"
                        },
                        new
                        {
                            Id = new Guid("0d982289-1b5d-4457-b295-dad7dad67b17"),
                            Category = "Charity",
                            City = "Plovdiv",
                            Date = new DateTime(2020, 7, 21, 15, 24, 25, 819, DateTimeKind.Local).AddTicks(7781),
                            Description = "This Event is 3 months in the future",
                            Title = "Future Event 3",
                            Venue = "Glavnata"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserEvent", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("AppUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "AppUser")
                        .WithMany("UserEvents")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
